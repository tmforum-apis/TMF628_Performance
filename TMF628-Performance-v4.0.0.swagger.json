{
    "swagger": "2.0",
    "info": {
        "title": "Performance",
        "description": "TMF628 Performance Management API",
        "version": "4.0.0"
    },
    "host": "serverRoot",
    "basePath": "/tmf-api/performance/v4/",
    "schemes": [
        "https"
    ],
    "consumes": [
        "application/json;charset=utf-8"
    ],
    "produces": [
        "application/json;charset=utf-8"
    ],
    "tags": [
        {
            "name": "measurementCollectionJob"
        },
        {
            "name": "onDemandCollection"
        },
        {
            "name": "performanceIndicatorGroupSpecification"
        },
        {
            "name": "performanceIndicatorSpecification"
        },
        {
            "name": "trackingRecord"
        },
        {
            "name": "notification listeners (client side)"
        },
        {
            "name": "events subscription"
        }
    ],
    "paths": {
        "/measurementCollectionJob": {
            "get": {
                "operationId": "listMeasurementCollectionJob",
                "summary": "List or find MeasurementCollectionJob objects",
                "description": "This operation list or find MeasurementCollectionJob entities",
                "tags": [
                    "measurementCollectionJob"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MeasurementCollectionJob"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createMeasurementCollectionJob",
                "summary": "Creates a MeasurementCollectionJob",
                "description": "This operation creates a MeasurementCollectionJob entity.",
                "tags": [
                    "measurementCollectionJob"
                ],
                "parameters": [
                    {
                        "name": "measurementCollectionJob",
                        "description": "The MeasurementCollectionJob to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MeasurementCollectionJob_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/MeasurementCollectionJob"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/measurementCollectionJob/{id}": {
            "get": {
                "operationId": "retrieveMeasurementCollectionJob",
                "summary": "Retrieves a MeasurementCollectionJob by ID",
                "description": "This operation retrieves a MeasurementCollectionJob entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "measurementCollectionJob"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the MeasurementCollectionJob",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MeasurementCollectionJob"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchMeasurementCollectionJob",
                "summary": "Updates partially a MeasurementCollectionJob",
                "description": "This operation updates partially a MeasurementCollectionJob entity.",
                "tags": [
                    "measurementCollectionJob"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the MeasurementCollectionJob",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "measurementCollectionJob",
                        "description": "The MeasurementCollectionJob to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MeasurementCollectionJob_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/MeasurementCollectionJob"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteMeasurementCollectionJob",
                "summary": "Deletes a MeasurementCollectionJob",
                "description": "This operation deletes a MeasurementCollectionJob entity.",
                "tags": [
                    "measurementCollectionJob"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the MeasurementCollectionJob",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/onDemandCollection": {
            "get": {
                "operationId": "listOnDemandCollection",
                "summary": "List or find OnDemandCollection objects",
                "description": "This operation list or find OnDemandCollection entities",
                "tags": [
                    "onDemandCollection"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/OnDemandCollection"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createOnDemandCollection",
                "summary": "Creates a OnDemandCollection",
                "description": "This operation creates a OnDemandCollection entity.",
                "tags": [
                    "onDemandCollection"
                ],
                "parameters": [
                    {
                        "name": "onDemandCollection",
                        "description": "The OnDemandCollection to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OnDemandCollection_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/OnDemandCollection"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/onDemandCollection/{id}": {
            "get": {
                "operationId": "retrieveOnDemandCollection",
                "summary": "Retrieves a OnDemandCollection by ID",
                "description": "This operation retrieves a OnDemandCollection entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "onDemandCollection"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the OnDemandCollection",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/OnDemandCollection"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchOnDemandCollection",
                "summary": "Updates partially a OnDemandCollection",
                "description": "This operation updates partially a OnDemandCollection entity.",
                "tags": [
                    "onDemandCollection"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the OnDemandCollection",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "onDemandCollection",
                        "description": "The OnDemandCollection to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OnDemandCollection_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/OnDemandCollection"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteOnDemandCollection",
                "summary": "Deletes a OnDemandCollection",
                "description": "This operation deletes a OnDemandCollection entity.",
                "tags": [
                    "onDemandCollection"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the OnDemandCollection",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/performanceIndicatorGroupSpecification": {
            "get": {
                "operationId": "listPerformanceIndicatorGroupSpecification",
                "summary": "List or find PerformanceIndicatorGroupSpecification objects",
                "description": "This operation list or find PerformanceIndicatorGroupSpecification entities",
                "tags": [
                    "performanceIndicatorGroupSpecification"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PerformanceIndicatorGroupSpecification"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createPerformanceIndicatorGroupSpecification",
                "summary": "Creates a PerformanceIndicatorGroupSpecification",
                "description": "This operation creates a PerformanceIndicatorGroupSpecification entity.",
                "tags": [
                    "performanceIndicatorGroupSpecification"
                ],
                "parameters": [
                    {
                        "name": "performanceIndicatorGroupSpecification",
                        "description": "The PerformanceIndicatorGroupSpecification to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PerformanceIndicatorGroupSpecification_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/PerformanceIndicatorGroupSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/performanceIndicatorGroupSpecification/{id}": {
            "get": {
                "operationId": "retrievePerformanceIndicatorGroupSpecification",
                "summary": "Retrieves a PerformanceIndicatorGroupSpecification by ID",
                "description": "This operation retrieves a PerformanceIndicatorGroupSpecification entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "performanceIndicatorGroupSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the PerformanceIndicatorGroupSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PerformanceIndicatorGroupSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchPerformanceIndicatorGroupSpecification",
                "summary": "Updates partially a PerformanceIndicatorGroupSpecification",
                "description": "This operation updates partially a PerformanceIndicatorGroupSpecification entity.",
                "tags": [
                    "performanceIndicatorGroupSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the PerformanceIndicatorGroupSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "performanceIndicatorGroupSpecification",
                        "description": "The PerformanceIndicatorGroupSpecification to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PerformanceIndicatorGroupSpecification_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/PerformanceIndicatorGroupSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deletePerformanceIndicatorGroupSpecification",
                "summary": "Deletes a PerformanceIndicatorGroupSpecification",
                "description": "This operation deletes a PerformanceIndicatorGroupSpecification entity.",
                "tags": [
                    "performanceIndicatorGroupSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the PerformanceIndicatorGroupSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/performanceIndicatorSpecification": {
            "get": {
                "operationId": "listPerformanceIndicatorSpecification",
                "summary": "List or find PerformanceIndicatorSpecification objects",
                "description": "This operation list or find PerformanceIndicatorSpecification entities",
                "tags": [
                    "performanceIndicatorSpecification"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PerformanceIndicatorSpecification"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createPerformanceIndicatorSpecification",
                "summary": "Creates a PerformanceIndicatorSpecification",
                "description": "This operation creates a PerformanceIndicatorSpecification entity.",
                "tags": [
                    "performanceIndicatorSpecification"
                ],
                "parameters": [
                    {
                        "name": "performanceIndicatorSpecification",
                        "description": "The PerformanceIndicatorSpecification to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PerformanceIndicatorSpecification_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/PerformanceIndicatorSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/performanceIndicatorSpecification/{id}": {
            "get": {
                "operationId": "retrievePerformanceIndicatorSpecification",
                "summary": "Retrieves a PerformanceIndicatorSpecification by ID",
                "description": "This operation retrieves a PerformanceIndicatorSpecification entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "performanceIndicatorSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the PerformanceIndicatorSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PerformanceIndicatorSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchPerformanceIndicatorSpecification",
                "summary": "Updates partially a PerformanceIndicatorSpecification",
                "description": "This operation updates partially a PerformanceIndicatorSpecification entity.",
                "tags": [
                    "performanceIndicatorSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the PerformanceIndicatorSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "performanceIndicatorSpecification",
                        "description": "The PerformanceIndicatorSpecification to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PerformanceIndicatorSpecification_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/PerformanceIndicatorSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deletePerformanceIndicatorSpecification",
                "summary": "Deletes a PerformanceIndicatorSpecification",
                "description": "This operation deletes a PerformanceIndicatorSpecification entity.",
                "tags": [
                    "performanceIndicatorSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the PerformanceIndicatorSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/trackingRecord": {
            "get": {
                "operationId": "listTrackingRecord",
                "summary": "List or find TrackingRecord objects",
                "description": "This operation list or find TrackingRecord entities",
                "tags": [
                    "trackingRecord"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TrackingRecord"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/trackingRecord/{id}": {
            "get": {
                "operationId": "retrieveTrackingRecord",
                "summary": "Retrieves a TrackingRecord by ID",
                "description": "This operation retrieves a TrackingRecord entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "trackingRecord"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the TrackingRecord",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TrackingRecord"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hub": {
            "post": {
                "operationId": "registerListener",
                "summary": "Register a listener",
                "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
                "tags": [
                    "events subscription"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "schema": {
                            "$ref": "#/definitions/EventSubscriptionInput"
                        },
                        "required": true,
                        "in": "body",
                        "description": "Data containing the callback endpoint to deliver the information"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Subscribed",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hub/{id}": {
            "delete": {
                "operationId": "unregisterListener",
                "summary": "Unregister a listener",
                "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
                "tags": [
                    "events subscription"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "description": "The id of the registered listener"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/measurementCollectionJobCreateEvent": {
            "post": {
                "operationId": "listenToMeasurementCollectionJobCreateEvent",
                "summary": "Client listener for entity MeasurementCollectionJobCreateEvent",
                "description": "Example of a client listener for receiving the notification MeasurementCollectionJobCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/MeasurementCollectionJobCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/measurementCollectionJobExecutionStateChangeEvent": {
            "post": {
                "operationId": "listenToMeasurementCollectionJobExecutionStateChangeEvent",
                "summary": "Client listener for entity MeasurementCollectionJobExecutionStateChangeEvent",
                "description": "Example of a client listener for receiving the notification MeasurementCollectionJobExecutionStateChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/MeasurementCollectionJobExecutionStateChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/measurementCollectionJobDeleteEvent": {
            "post": {
                "operationId": "listenToMeasurementCollectionJobDeleteEvent",
                "summary": "Client listener for entity MeasurementCollectionJobDeleteEvent",
                "description": "Example of a client listener for receiving the notification MeasurementCollectionJobDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/MeasurementCollectionJobDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/measurementCollectionJobAttributeValueChangeEvent": {
            "post": {
                "operationId": "listenToMeasurementCollectionJobAttributeValueChangeEvent",
                "summary": "Client listener for entity MeasurementCollectionJobAttributeValueChangeEvent",
                "description": "Example of a client listener for receiving the notification MeasurementCollectionJobAttributeValueChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/MeasurementCollectionJobAttributeValueChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/measurementCollectionJobFilesReadyEvent": {
            "post": {
                "operationId": "listenToMeasurementCollectionJobFilesReadyEvent",
                "summary": "Client listener for entity MeasurementCollectionJobFilesReadyEvent",
                "description": "Example of a client listener for receiving the notification MeasurementCollectionJobFilesReadyEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/MeasurementCollectionJobFilesReadyEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/measurementCollectionJobFilesPreparationErrorEvent": {
            "post": {
                "operationId": "listenToMeasurementCollectionJobFilesPreparationErrorEvent",
                "summary": "Client listener for entity MeasurementCollectionJobFilesPreparationErrorEvent",
                "description": "Example of a client listener for receiving the notification MeasurementCollectionJobFilesPreparationErrorEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/MeasurementCollectionJobFilesPreparationErrorEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/onDemandCollectionCreateEvent": {
            "post": {
                "operationId": "listenToOnDemandCollectionCreateEvent",
                "summary": "Client listener for entity OnDemandCollectionCreateEvent",
                "description": "Example of a client listener for receiving the notification OnDemandCollectionCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/OnDemandCollectionCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/onDemandCollectionExecutionStateChangeEvent": {
            "post": {
                "operationId": "listenToOnDemandCollectionExecutionStateChangeEvent",
                "summary": "Client listener for entity OnDemandCollectionExecutionStateChangeEvent",
                "description": "Example of a client listener for receiving the notification OnDemandCollectionExecutionStateChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/OnDemandCollectionExecutionStateChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/onDemandCollectionDeleteEvent": {
            "post": {
                "operationId": "listenToOnDemandCollectionDeleteEvent",
                "summary": "Client listener for entity OnDemandCollectionDeleteEvent",
                "description": "Example of a client listener for receiving the notification OnDemandCollectionDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/OnDemandCollectionDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/onDemandCollectionAttributeValueChangeEvent": {
            "post": {
                "operationId": "listenToOnDemandCollectionAttributeValueChangeEvent",
                "summary": "Client listener for entity OnDemandCollectionAttributeValueChangeEvent",
                "description": "Example of a client listener for receiving the notification OnDemandCollectionAttributeValueChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/OnDemandCollectionAttributeValueChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/onDemandCollectionFilesReadyEvent": {
            "post": {
                "operationId": "listenToOnDemandCollectionFilesReadyEvent",
                "summary": "Client listener for entity OnDemandCollectionFilesReadyEvent",
                "description": "Example of a client listener for receiving the notification OnDemandCollectionFilesReadyEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/OnDemandCollectionFilesReadyEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/onDemandCollectionFilesPreparationErrorEvent": {
            "post": {
                "operationId": "listenToOnDemandCollectionFilesPreparationErrorEvent",
                "summary": "Client listener for entity OnDemandCollectionFilesPreparationErrorEvent",
                "description": "Example of a client listener for receiving the notification OnDemandCollectionFilesPreparationErrorEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/OnDemandCollectionFilesPreparationErrorEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Addressable": {
            "type": "object",
            "description": "Base schema for adressable entities",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                }
            }
        },
        "AdministrativeState": {
            "type": "string",
            "description": "This is enumeration for Administrative state",
            "enum": [
                "locked",
                "unlocked"
            ]
        },
        "Any": {},
        "Characteristic": {
            "type": "object",
            "description": "Describes a given characteristic of an object or entity through a name/value pair.",
            "required": [
                "name",
                "value"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the characteristic"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the characteristic"
                },
                "valueType": {
                    "type": "string",
                    "description": "Data type of the value of the characteristic"
                },
                "characteristicRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CharacteristicRelationship"
                    }
                },
                "value": {
                    "$ref": "#/definitions/Any",
                    "description": "The value of the characteristic"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "CharacteristicRelationship": {
            "type": "object",
            "description": "Another Characteristic that is related to the current Characteristic;",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the characteristic"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "relationshipType": {
                    "type": "string",
                    "description": "The type of relationship"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "CollectionType": {
            "type": "string",
            "description": "This is enumeration for CollectionType state",
            "enum": [
                "cumulative",
                "delta",
                "discrete_event",
                "gauge",
                "status_inspection"
            ]
        },
        "CompressionEnumType": {
            "type": "string",
            "description": "Enumeration of supported compressions. All extensions allowed.",
            "enum": [
                "no_compression",
                "gzip",
                "vendor_ext",
                "minor_ext"
            ]
        },
        "CompressionType": {
            "type": "object",
            "description": "File compression type.",
            "properties": {
                "compressionEnumType": {
                    "$ref": "#/definitions/CompressionEnumType"
                }
            }
        },
        "DayOfMonthRecurrence": {
            "type": "object",
            "properties": {
                "dates": {
                    "type": "string",
                    "format": "date-time"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "DayOfWeekRecurrence": {
            "type": "object",
            "properties": {
                "dates": {
                    "type": "string",
                    "format": "date-time"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "Duration": {
            "type": "object",
            "description": "A time interval in a given unit of time",
            "properties": {
                "amount": {
                    "type": "integer",
                    "description": "Time interval (number of seconds, minutes, hours, etc.)"
                },
                "units": {
                    "type": "string",
                    "description": "Unit of time (seconds, minutes, hours, etc.)"
                }
            }
        },
        "Entity": {
            "type": "object",
            "description": "Base entity schema for use in TMForum Open-APIs",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "EntityRef": {
            "type": "object",
            "description": "Entity reference schema to be use for all entityRef class.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "ExecutionStateType": {
            "type": "string",
            "description": "Possible values for the state of the execution",
            "enum": [
                "acknowledged",
                "rejected",
                "pending",
                "inProgress",
                "cancelled",
                "completed",
                "failed"
            ]
        },
        "Extensible": {
            "type": "object",
            "description": "Base Extensible schema for use in TMForum Open-APIs",
            "properties": {
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "FileTransferData": {
            "type": "object",
            "properties": {
                "fileFormat": {
                    "type": "string"
                },
                "fileLocation": {
                    "type": "string",
                    "format": "uri"
                },
                "transportProtocol": {
                    "type": "string"
                },
                "compressionType": {
                    "$ref": "#/definitions/CompressionType"
                },
                "packingType": {
                    "$ref": "#/definitions/PackingType"
                },
                "retentionPeriod": {
                    "$ref": "#/definitions/Duration"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "Granularity": {
            "type": "string",
            "description": "Sampling rate of the collection or production of performance indicators.",
            "enum": [
                "g_1mn",
                "g_5mn",
                "g_15mn",
                "g_30mn",
                "g_1h",
                "g_24h",
                "g_1m",
                "g_1y",
                "na"
            ]
        },
        "IndicatorType": {
            "type": "string",
            "description": "This is enumeration for Indicator Type",
            "enum": [
                "string",
                "int",
                "float",
                "double"
            ]
        },
        "ManagementJob": {
            "type": "object",
            "required": [
                "fileTransferData"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "creationTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The measurement job creation time."
                },
                "jobId": {
                    "type": "string",
                    "description": "The ID of the management job."
                },
                "jobPriority": {
                    "default": 5,
                    "type": "integer",
                    "description": "The priority of the management job. The way the management application will use the JobPriority to schedule job execution is application specific and outside the scope. Integer, limited to a range of 1 to 10."
                },
                "lastModifiedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The last time that a measurement job was modified."
                },
                "adminState": {
                    "$ref": "#/definitions/AdministrativeState"
                },
                "executionState": {
                    "$ref": "#/definitions/ExecutionStateType"
                },
                "fileTransferData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FileTransferData"
                    },
                    "minItems": 1
                },
                "scheduleDefinition": {
                    "$ref": "#/definitions/ScheduleDefinition"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "MeasurementCollectionJob": {
            "type": "object",
            "description": "Used to control the periodic collection of performance indicators, implemented as a sub-entity of the PM Measurement Job.",
            "required": [
                "fileTransferData"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "consumingApplicationId": {
                    "type": "string",
                    "description": "The identifier of the application that consumes performance indicators."
                },
                "creationTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The measurement job creation time."
                },
                "jobId": {
                    "type": "string",
                    "description": "The ID of the management job."
                },
                "jobPriority": {
                    "default": 5,
                    "type": "integer",
                    "description": "The priority of the management job. The way the management application will use the JobPriority to schedule job execution is application specific and outside the scope. Integer, limited to a range of 1 to 10."
                },
                "lastModifiedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The last time that a measurement job was modified."
                },
                "outputFormat": {
                    "type": "string"
                },
                "producingApplicationId": {
                    "type": "string",
                    "description": "The identifier of the application that produces performance indicators."
                },
                "adminState": {
                    "$ref": "#/definitions/AdministrativeState"
                },
                "executionState": {
                    "$ref": "#/definitions/ExecutionStateType"
                },
                "fileTransferData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FileTransferData"
                    },
                    "minItems": 1
                },
                "granularity": {
                    "$ref": "#/definitions/Granularity"
                },
                "monitoredClassCriteria": {
                    "$ref": "#/definitions/MonitoredClassCriteria"
                },
                "monitoredInstancesCriteria": {
                    "$ref": "#/definitions/MonitoredInstancesCriteria"
                },
                "performanceIndicatorGroupSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorGroupSpecification"
                    }
                },
                "performanceIndicatorSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorSpecificationRefOrValue"
                    }
                },
                "reportingPeriod": {
                    "$ref": "#/definitions/ReportingPeriod"
                },
                "scheduleDefinition": {
                    "$ref": "#/definitions/ScheduleDefinition"
                },
                "trackingRecord": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TrackingRecord"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "MeasurementCollectionJob_Create": {
            "type": "object",
            "description": "Used to control the periodic collection of performance indicators, implemented as a sub-entity of the PM Measurement Job.\nSkipped properties: id,href",
            "required": [
                "fileTransferData"
            ],
            "properties": {
                "consumingApplicationId": {
                    "type": "string",
                    "description": "The identifier of the application that consumes performance indicators."
                },
                "creationTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The measurement job creation time."
                },
                "jobId": {
                    "type": "string",
                    "description": "The ID of the management job."
                },
                "jobPriority": {
                    "default": 5,
                    "type": "integer",
                    "description": "The priority of the management job. The way the management application will use the JobPriority to schedule job execution is application specific and outside the scope. Integer, limited to a range of 1 to 10."
                },
                "lastModifiedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The last time that a measurement job was modified."
                },
                "outputFormat": {
                    "type": "string"
                },
                "producingApplicationId": {
                    "type": "string",
                    "description": "The identifier of the application that produces performance indicators."
                },
                "adminState": {
                    "$ref": "#/definitions/AdministrativeState"
                },
                "executionState": {
                    "$ref": "#/definitions/ExecutionStateType"
                },
                "fileTransferData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FileTransferData"
                    },
                    "minItems": 1
                },
                "granularity": {
                    "$ref": "#/definitions/Granularity"
                },
                "monitoredClassCriteria": {
                    "$ref": "#/definitions/MonitoredClassCriteria"
                },
                "monitoredInstancesCriteria": {
                    "$ref": "#/definitions/MonitoredInstancesCriteria"
                },
                "performanceIndicatorGroupSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorGroupSpecification"
                    }
                },
                "performanceIndicatorSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorSpecificationRefOrValue"
                    }
                },
                "reportingPeriod": {
                    "$ref": "#/definitions/ReportingPeriod"
                },
                "scheduleDefinition": {
                    "$ref": "#/definitions/ScheduleDefinition"
                },
                "trackingRecord": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TrackingRecord"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "MeasurementCollectionJob_Update": {
            "type": "object",
            "description": "Used to control the periodic collection of performance indicators, implemented as a sub-entity of the PM Measurement Job.\nSkipped properties: id,href",
            "required": [
                "fileTransferData"
            ],
            "properties": {
                "consumingApplicationId": {
                    "type": "string",
                    "description": "The identifier of the application that consumes performance indicators."
                },
                "creationTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The measurement job creation time."
                },
                "jobId": {
                    "type": "string",
                    "description": "The ID of the management job."
                },
                "jobPriority": {
                    "default": 5,
                    "type": "integer",
                    "description": "The priority of the management job. The way the management application will use the JobPriority to schedule job execution is application specific and outside the scope. Integer, limited to a range of 1 to 10."
                },
                "lastModifiedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The last time that a measurement job was modified."
                },
                "outputFormat": {
                    "type": "string"
                },
                "producingApplicationId": {
                    "type": "string",
                    "description": "The identifier of the application that produces performance indicators."
                },
                "adminState": {
                    "$ref": "#/definitions/AdministrativeState"
                },
                "executionState": {
                    "$ref": "#/definitions/ExecutionStateType"
                },
                "fileTransferData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FileTransferData"
                    },
                    "minItems": 1
                },
                "granularity": {
                    "$ref": "#/definitions/Granularity"
                },
                "monitoredClassCriteria": {
                    "$ref": "#/definitions/MonitoredClassCriteria"
                },
                "monitoredInstancesCriteria": {
                    "$ref": "#/definitions/MonitoredInstancesCriteria"
                },
                "performanceIndicatorGroupSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorGroupSpecification"
                    }
                },
                "performanceIndicatorSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorSpecificationRefOrValue"
                    }
                },
                "reportingPeriod": {
                    "$ref": "#/definitions/ReportingPeriod"
                },
                "scheduleDefinition": {
                    "$ref": "#/definitions/ScheduleDefinition"
                },
                "trackingRecord": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TrackingRecord"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "MeasurementJob": {
            "type": "object",
            "description": "A PM measurement job is the administrative entity defined by a client application to perform a periodic activity related to PM data.  The PM activities may be production of measurements, collection of measurements or PM objective monitoring (scheduled evaluation of thresholds).",
            "required": [
                "fileTransferData"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "consumingApplicationId": {
                    "type": "string",
                    "description": "The identifier of the application that consumes performance indicators."
                },
                "creationTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The measurement job creation time."
                },
                "jobId": {
                    "type": "string",
                    "description": "The ID of the management job."
                },
                "jobPriority": {
                    "default": 5,
                    "type": "integer",
                    "description": "The priority of the management job. The way the management application will use the JobPriority to schedule job execution is application specific and outside the scope. Integer, limited to a range of 1 to 10."
                },
                "lastModifiedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The last time that a measurement job was modified."
                },
                "producingApplicationId": {
                    "type": "string",
                    "description": "The identifier of the application that produces performance indicators."
                },
                "adminState": {
                    "$ref": "#/definitions/AdministrativeState"
                },
                "executionState": {
                    "$ref": "#/definitions/ExecutionStateType"
                },
                "fileTransferData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FileTransferData"
                    },
                    "minItems": 1
                },
                "granularity": {
                    "$ref": "#/definitions/Granularity"
                },
                "monitoredClassCriteria": {
                    "$ref": "#/definitions/MonitoredClassCriteria"
                },
                "monitoredInstancesCriteria": {
                    "$ref": "#/definitions/MonitoredInstancesCriteria"
                },
                "performanceIndicatorGroupSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorGroupSpecification"
                    }
                },
                "performanceIndicatorSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorSpecificationRefOrValue"
                    }
                },
                "scheduleDefinition": {
                    "$ref": "#/definitions/ScheduleDefinition"
                },
                "trackingRecord": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TrackingRecord"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "MonitoredClassCriteria": {
            "type": "object",
            "description": "Specifies a monitored object class (a string) in conjunction with a filter object.",
            "properties": {
                "monitoredObjectClass": {
                    "type": "string",
                    "description": "A monitored object class for specifying the set of instances that are referenced by a PM query."
                },
                "objectInstanceFilter": {
                    "type": "string",
                    "description": "A filter that can be used in conjunction with the monitored object class for specifying the set of instances that are referenced by a PM query."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "MonitoredInstancesCriteria": {
            "type": "object",
            "description": "List of monitored instances",
            "properties": {
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "MonthlyScheduleDayOfWeekDefinition": {
            "type": "object",
            "properties": {
                "recurringDaySequence": {
                    "type": "string"
                },
                "dayOfMonthRecurrence": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DayOfMonthRecurrence"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "OnDemandCollection": {
            "type": "object",
            "required": [
                "fileTransferData"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "consumingApplicationId": {
                    "type": "string"
                },
                "creationTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The measurement job creation time."
                },
                "jobId": {
                    "type": "string",
                    "description": "The ID of the management job."
                },
                "jobPriority": {
                    "default": 5,
                    "type": "integer",
                    "description": "The priority of the management job. The way the management application will use the JobPriority to schedule job execution is application specific and outside the scope. Integer, limited to a range of 1 to 10."
                },
                "lastModifiedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The last time that a measurement job was modified."
                },
                "outputFormat": {
                    "type": "string"
                },
                "producingApplicationId": {
                    "type": "string"
                },
                "adminState": {
                    "$ref": "#/definitions/AdministrativeState"
                },
                "collectionPeriod": {
                    "$ref": "#/definitions/TimePeriod"
                },
                "executionState": {
                    "$ref": "#/definitions/ExecutionStateType"
                },
                "fileTransferData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FileTransferData"
                    },
                    "minItems": 1
                },
                "granulatiry": {
                    "$ref": "#/definitions/Granularity"
                },
                "monitoredClassCriteria": {
                    "$ref": "#/definitions/MonitoredClassCriteria"
                },
                "monitoredInstancesCriteria": {
                    "$ref": "#/definitions/MonitoredInstancesCriteria"
                },
                "performanceIndicatorGroupSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorGroupSpecification"
                    }
                },
                "performanceIndicatorSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorSpecificationRefOrValue"
                    }
                },
                "scheduleDefinition": {
                    "$ref": "#/definitions/ScheduleDefinition"
                },
                "trackingRecord": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TrackingRecord"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "OnDemandCollection_Create": {
            "type": "object",
            "description": "\nSkipped properties: id,href",
            "required": [
                "fileTransferData"
            ],
            "properties": {
                "consumingApplicationId": {
                    "type": "string"
                },
                "creationTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The measurement job creation time."
                },
                "jobId": {
                    "type": "string",
                    "description": "The ID of the management job."
                },
                "jobPriority": {
                    "default": 5,
                    "type": "integer",
                    "description": "The priority of the management job. The way the management application will use the JobPriority to schedule job execution is application specific and outside the scope. Integer, limited to a range of 1 to 10."
                },
                "lastModifiedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The last time that a measurement job was modified."
                },
                "outputFormat": {
                    "type": "string"
                },
                "producingApplicationId": {
                    "type": "string"
                },
                "adminState": {
                    "$ref": "#/definitions/AdministrativeState"
                },
                "collectionPeriod": {
                    "$ref": "#/definitions/TimePeriod"
                },
                "executionState": {
                    "$ref": "#/definitions/ExecutionStateType"
                },
                "fileTransferData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FileTransferData"
                    },
                    "minItems": 1
                },
                "granulatiry": {
                    "$ref": "#/definitions/Granularity"
                },
                "monitoredClassCriteria": {
                    "$ref": "#/definitions/MonitoredClassCriteria"
                },
                "monitoredInstancesCriteria": {
                    "$ref": "#/definitions/MonitoredInstancesCriteria"
                },
                "performanceIndicatorGroupSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorGroupSpecification"
                    }
                },
                "performanceIndicatorSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorSpecificationRefOrValue"
                    }
                },
                "scheduleDefinition": {
                    "$ref": "#/definitions/ScheduleDefinition"
                },
                "trackingRecord": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TrackingRecord"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "OnDemandCollection_Update": {
            "type": "object",
            "description": "\nSkipped properties: id,href",
            "required": [
                "fileTransferData"
            ],
            "properties": {
                "consumingApplicationId": {
                    "type": "string"
                },
                "creationTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The measurement job creation time."
                },
                "jobId": {
                    "type": "string",
                    "description": "The ID of the management job."
                },
                "jobPriority": {
                    "default": 5,
                    "type": "integer",
                    "description": "The priority of the management job. The way the management application will use the JobPriority to schedule job execution is application specific and outside the scope. Integer, limited to a range of 1 to 10."
                },
                "lastModifiedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The last time that a measurement job was modified."
                },
                "outputFormat": {
                    "type": "string"
                },
                "producingApplicationId": {
                    "type": "string"
                },
                "adminState": {
                    "$ref": "#/definitions/AdministrativeState"
                },
                "collectionPeriod": {
                    "$ref": "#/definitions/TimePeriod"
                },
                "executionState": {
                    "$ref": "#/definitions/ExecutionStateType"
                },
                "fileTransferData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FileTransferData"
                    },
                    "minItems": 1
                },
                "granulatiry": {
                    "$ref": "#/definitions/Granularity"
                },
                "monitoredClassCriteria": {
                    "$ref": "#/definitions/MonitoredClassCriteria"
                },
                "monitoredInstancesCriteria": {
                    "$ref": "#/definitions/MonitoredInstancesCriteria"
                },
                "performanceIndicatorGroupSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorGroupSpecification"
                    }
                },
                "performanceIndicatorSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorSpecificationRefOrValue"
                    }
                },
                "scheduleDefinition": {
                    "$ref": "#/definitions/ScheduleDefinition"
                },
                "trackingRecord": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TrackingRecord"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PackingEnumType": {
            "type": "string",
            "description": "Enumeration of supported packing/packaging. All extensions allowed.",
            "enum": [
                "NO_PACKING",
                "GZIP",
                "TAR",
                "VENDOR_EXT",
                "MINOR_EXT"
            ]
        },
        "PackingType": {
            "type": "object",
            "description": "Specify if the output file(s) are to be packed.",
            "properties": {
                "packingEnumType": {
                    "$ref": "#/definitions/PackingEnumType"
                }
            }
        },
        "PerformanceIndicatorGroupSpecification": {
            "type": "object",
            "required": [
                "name",
                "performanceIndicatorSpecification"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Group specification"
                },
                "performanceIndicatorSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorSpecificationRef"
                    },
                    "minItems": 1
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PerformanceIndicatorGroupSpecification_Create": {
            "type": "object",
            "description": "\nSkipped properties: id,href",
            "required": [
                "name",
                "performanceIndicatorSpecification"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of Group specification"
                },
                "performanceIndicatorSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorSpecificationRef"
                    },
                    "minItems": 1
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PerformanceIndicatorGroupSpecification_Update": {
            "type": "object",
            "description": "\nSkipped properties: id,href",
            "required": [
                "name",
                "performanceIndicatorSpecification"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of Group specification"
                },
                "performanceIndicatorSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorSpecificationRef"
                    },
                    "minItems": 1
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PerformanceIndicatorSpecRelationship": {
            "type": "object",
            "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity",
            "required": [
                "relationshipType",
                "validFor"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the target specification"
                },
                "href": {
                    "type": "string",
                    "description": "Hyperlink reference to the target specification"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the targetcharacteristic"
                },
                "relationshipType": {
                    "type": "string"
                },
                "role": {
                    "type": "string",
                    "description": "The association role for this service specification"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the performanceIndicatorSpecRelationship is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PerformanceIndicatorSpecification": {
            "type": "object",
            "description": "Holds the definition of the requested Performance indicator including: its name, value type, collection type, description and units.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the PerformanceIndicatorSpecification."
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "derivationAlgorithm": {
                    "type": "string",
                    "description": "A step-by-step procedure used to calculate the value of PerformanceIndicator."
                },
                "derivationMethod": {
                    "type": "string",
                    "description": "For simple calculations, the method used to calculate the value of a PerformanceIndicator, such as average, minimum, maximum, sum and so forth."
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the PerformanceIndicatorSpecification is."
                },
                "indicatorCategory": {
                    "type": "string",
                    "description": "A grouping or set of PerformanceIndicatorSpecifications that are classified together because of common characteristics, such as technology specific, service specific, or technology/service independent."
                },
                "indicatorUnit": {
                    "type": "string",
                    "description": "The unit by which the indicator is measured. For example, seconds, KBs, rate per second, etc."
                },
                "name": {
                    "type": "string",
                    "description": "A word, term, or phrase by which a PerformanceIndicatorSpecification is known and distinguished from other PerformanceIndicatorSpecifications."
                },
                "perspective": {
                    "type": "string",
                    "description": "The point of view for the PerformanceIndicatorSpecification, such as a single user instance or aggregation."
                },
                "collectionType": {
                    "$ref": "#/definitions/CollectionType",
                    "description": "The type of collection: gauge, cumulative,delta,discrete event,status inspection. Indicators can be produced using these methods."
                },
                "indicatorType": {
                    "$ref": "#/definitions/IndicatorType",
                    "description": "A kind of value that the PerformanceIndicator can take; double float,int, string."
                },
                "performanceIndicatorSpecRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorSpecRelationship"
                    }
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time during which the PerformanceIndicatorSpecification is applicable."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PerformanceIndicatorSpecification_Create": {
            "type": "object",
            "description": "Holds the definition of the requested Performance indicator including: its name, value type, collection type, description and units.\nSkipped properties: id,href",
            "properties": {
                "derivationAlgorithm": {
                    "type": "string",
                    "description": "A step-by-step procedure used to calculate the value of PerformanceIndicator."
                },
                "derivationMethod": {
                    "type": "string",
                    "description": "For simple calculations, the method used to calculate the value of a PerformanceIndicator, such as average, minimum, maximum, sum and so forth."
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the PerformanceIndicatorSpecification is."
                },
                "indicatorCategory": {
                    "type": "string",
                    "description": "A grouping or set of PerformanceIndicatorSpecifications that are classified together because of common characteristics, such as technology specific, service specific, or technology/service independent."
                },
                "indicatorUnit": {
                    "type": "string",
                    "description": "The unit by which the indicator is measured. For example, seconds, KBs, rate per second, etc."
                },
                "name": {
                    "type": "string",
                    "description": "A word, term, or phrase by which a PerformanceIndicatorSpecification is known and distinguished from other PerformanceIndicatorSpecifications."
                },
                "perspective": {
                    "type": "string",
                    "description": "The point of view for the PerformanceIndicatorSpecification, such as a single user instance or aggregation."
                },
                "collectionType": {
                    "$ref": "#/definitions/CollectionType",
                    "description": "The type of collection: gauge, cumulative,delta,discrete event,status inspection. Indicators can be produced using these methods."
                },
                "indicatorType": {
                    "$ref": "#/definitions/IndicatorType",
                    "description": "A kind of value that the PerformanceIndicator can take; double float,int, string."
                },
                "performanceIndicatorSpecRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorSpecRelationship"
                    }
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time during which the PerformanceIndicatorSpecification is applicable."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PerformanceIndicatorSpecification_Update": {
            "type": "object",
            "description": "Holds the definition of the requested Performance indicator including: its name, value type, collection type, description and units.\nSkipped properties: id,href",
            "properties": {
                "derivationAlgorithm": {
                    "type": "string",
                    "description": "A step-by-step procedure used to calculate the value of PerformanceIndicator."
                },
                "derivationMethod": {
                    "type": "string",
                    "description": "For simple calculations, the method used to calculate the value of a PerformanceIndicator, such as average, minimum, maximum, sum and so forth."
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the PerformanceIndicatorSpecification is."
                },
                "indicatorCategory": {
                    "type": "string",
                    "description": "A grouping or set of PerformanceIndicatorSpecifications that are classified together because of common characteristics, such as technology specific, service specific, or technology/service independent."
                },
                "indicatorUnit": {
                    "type": "string",
                    "description": "The unit by which the indicator is measured. For example, seconds, KBs, rate per second, etc."
                },
                "name": {
                    "type": "string",
                    "description": "A word, term, or phrase by which a PerformanceIndicatorSpecification is known and distinguished from other PerformanceIndicatorSpecifications."
                },
                "perspective": {
                    "type": "string",
                    "description": "The point of view for the PerformanceIndicatorSpecification, such as a single user instance or aggregation."
                },
                "collectionType": {
                    "$ref": "#/definitions/CollectionType",
                    "description": "The type of collection: gauge, cumulative,delta,discrete event,status inspection. Indicators can be produced using these methods."
                },
                "indicatorType": {
                    "$ref": "#/definitions/IndicatorType",
                    "description": "A kind of value that the PerformanceIndicator can take; double float,int, string."
                },
                "performanceIndicatorSpecRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorSpecRelationship"
                    }
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time during which the PerformanceIndicatorSpecification is applicable."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PerformanceIndicatorSpecificationRef": {
            "type": "object",
            "description": "PerformanceIndicatorSpecification reference: A PerformanceIndicatorSpecification is a detailed description of a tangible or intangible object made available externally in the form of a PerformanceIndicatorSpecification to customers or other parties playing a party role.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "version": {
                    "type": "string",
                    "description": "Version of the performance indicator specification"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "PerformanceIndicatorSpecificationRefOrValue": {
            "type": "object",
            "description": "A product to be created defined by value or existing defined by reference. The polymorphic attributes @type, @schemaLocation & @referredType are related to the product entity and not the RelatedProductRefOrValue class itself",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the PerformanceIndicatorSpecification."
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "derivationAlgorithm": {
                    "type": "string",
                    "description": "A step-by-step procedure used to calculate the value of PerformanceIndicator."
                },
                "derivationMethod": {
                    "type": "string",
                    "description": "For simple calculations, the method used to calculate the value of a PerformanceIndicator, such as average, minimum, maximum, sum and so forth."
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the PerformanceIndicatorSpecification is."
                },
                "indicatorCategory": {
                    "type": "string",
                    "description": "A grouping or set of PerformanceIndicatorSpecifications that are classified together because of common characteristics, such as technology specific, service specific, or technology/service independent."
                },
                "indicatorUnit": {
                    "type": "string",
                    "description": "The unit by which the indicator is measured. For example, seconds, KBs, rate per second, etc."
                },
                "name": {
                    "type": "string",
                    "description": "A word, term, or phrase by which a PerformanceIndicatorSpecification is known and distinguished from other PerformanceIndicatorSpecifications."
                },
                "perspective": {
                    "type": "string",
                    "description": "The point of view for the PerformanceIndicatorSpecification, such as a single user instance or aggregation."
                },
                "version": {
                    "type": "string",
                    "description": "Version of the performance indicator specification"
                },
                "collectionType": {
                    "$ref": "#/definitions/CollectionType",
                    "description": "The type of collection: gauge, cumulative,delta,discrete event,status inspection. Indicators can be produced using these methods."
                },
                "indicatorType": {
                    "$ref": "#/definitions/IndicatorType",
                    "description": "A kind of value that the PerformanceIndicator can take; double float,int, string."
                },
                "performanceIndicatorSpecRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorSpecRelationship"
                    }
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time during which the PerformanceIndicatorSpecification is applicable."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "ProtocolTransferData": {
            "type": "object",
            "properties": {
                "transportProtocol": {
                    "type": "string"
                }
            }
        },
        "ReportingPeriod": {
            "type": "string",
            "description": "Possible values for the reporting period",
            "enum": [
                "r_1mn",
                "r_5mn",
                "r_15mn",
                "r_30mn",
                "r_1h",
                "r_24h",
                "na"
            ]
        },
        "ScheduleDefinition": {
            "type": "object",
            "description": "The schedule definition for running jobs.",
            "properties": {
                "recurringFrequency": {
                    "type": "string",
                    "description": "A recurring frequency to run a job within day that is included in schedule definition, for example: every 5 minutes, 15 minute, 30 minutes, 1 hour"
                },
                "scheduleDefinitionEndTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The Endtime of the Schedule Definition. If the attribute is empty the Schedule run forever, not having a time constraint."
                },
                "scheduleDefinitionHourRange": {
                    "type": "string",
                    "description": "A list of time ranges within a specific day that the schedule will be active on, for example 08:00-12:00, 16:00-19:00."
                },
                "scheduleDefinitionStartTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The Start time of the Schedule Definition"
                },
                "MonthlyScheduleDayOfWeekDefinition": {
                    "$ref": "#/definitions/MonthlyScheduleDayOfWeekDefinition"
                },
                "WeeklyScheduledDefinition": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DayOfWeekRecurrence"
                    },
                    "description": "The weekly schedule is used to define a schedule that is based on the days of the week, e.g. a schedule that will be active only on Monday and Tuesday."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "TimePeriod": {
            "type": "object",
            "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
            "properties": {
                "endDateTime": {
                    "example": "1985-04-12T23:20:50.52Z",
                    "type": "string",
                    "format": "date-time",
                    "description": "End of the time period, using IETC-RFC-3339 format"
                },
                "startDateTime": {
                    "example": "1985-04-12T23:20:50.52Z",
                    "type": "string",
                    "format": "date-time",
                    "description": "Start of the time period, using IETC-RFC-3339 format"
                }
            }
        },
        "TrackingRecord": {
            "type": "object",
            "description": "Tracking records allow the tracking of modifications on the problem. The tracking records should not be embedded in the problem to allow retrieving the problem without the tracking records",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of the TrackingRecord"
                },
                "description": {
                    "example": [
                        "acknowledge",
                        "clear"
                    ],
                    "type": "string",
                    "description": "Describes the action being done, such as: ack, clear"
                },
                "systemId": {
                    "type": "string",
                    "description": "Describes the system Id from which the action was done"
                },
                "time": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Describes the time at which the action was done"
                },
                "user": {
                    "type": "string",
                    "description": "Describes the user doing the action"
                },
                "characteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    },
                    "description": "A generic list of any type of elements. Used for vendor Extensions or loose element encapsulation from other namespaces"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "EventSubscription": {
            "type": "object",
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
            "required": [
                "id",
                "callback"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the listener"
                },
                "callback": {
                    "type": "string",
                    "description": "The callback being registered."
                },
                "query": {
                    "type": "string",
                    "description": "additional data to be passed"
                }
            }
        },
        "EventSubscriptionInput": {
            "type": "object",
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
            "required": [
                "callback"
            ],
            "properties": {
                "callback": {
                    "type": "string",
                    "description": "The callback being registered."
                },
                "query": {
                    "type": "string",
                    "description": "additional data to be passed"
                }
            }
        },
        "MeasurementCollectionJobCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/MeasurementCollectionJobCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "MeasurementCollectionJobCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "measurementCollectionJob": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/MeasurementCollectionJob"
                }
            }
        },
        "MeasurementCollectionJobExecutionStateChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/MeasurementCollectionJobExecutionStateChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "MeasurementCollectionJobExecutionStateChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "measurementCollectionJob": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/MeasurementCollectionJob"
                }
            }
        },
        "MeasurementCollectionJobDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/MeasurementCollectionJobDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "MeasurementCollectionJobDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "measurementCollectionJob": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/MeasurementCollectionJob"
                }
            }
        },
        "MeasurementCollectionJobAttributeValueChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/MeasurementCollectionJobAttributeValueChangeEventPayload"
                }
            }
        },
        "MeasurementCollectionJobAttributeValueChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "measurementCollectionJob": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/MeasurementCollectionJob"
                }
            }
        },
        "MeasurementCollectionJobFilesReadyEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/MeasurementCollectionJobFilesReadyEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "MeasurementCollectionJobFilesReadyEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "measurementCollectionJob": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/MeasurementCollectionJob"
                }
            }
        },
        "MeasurementCollectionJobFilesPreparationErrorEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/MeasurementCollectionJobFilesPreparationErrorEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "MeasurementCollectionJobFilesPreparationErrorEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "measurementCollectionJob": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/MeasurementCollectionJob"
                }
            }
        },
        "OnDemandCollectionCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/OnDemandCollectionCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "OnDemandCollectionCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "onDemandCollection": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/OnDemandCollection"
                }
            }
        },
        "OnDemandCollectionExecutionStateChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/OnDemandCollectionExecutionStateChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "OnDemandCollectionExecutionStateChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "onDemandCollection": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/OnDemandCollection"
                }
            }
        },
        "OnDemandCollectionDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/OnDemandCollectionDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "OnDemandCollectionDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "onDemandCollection": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/OnDemandCollection"
                }
            }
        },
        "OnDemandCollectionAttributeValueChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/OnDemandCollectionAttributeValueChangeEventPayload"
                }
            }
        },
        "OnDemandCollectionAttributeValueChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "onDemandCollection": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/OnDemandCollection"
                }
            }
        },
        "OnDemandCollectionFilesReadyEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/OnDemandCollectionFilesReadyEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "OnDemandCollectionFilesReadyEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "onDemandCollection": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/OnDemandCollection"
                }
            }
        },
        "OnDemandCollectionFilesPreparationErrorEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/OnDemandCollectionFilesPreparationErrorEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "OnDemandCollectionFilesPreparationErrorEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "onDemandCollection": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/OnDemandCollection"
                }
            }
        },
        "Error": {
            "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
            "type": "object",
            "required": [
                "code",
                "reason"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Application relevant detail, defined in the API or a common list."
                },
                "reason": {
                    "type": "string",
                    "description": "Explanation of the reason for the error which can be shown to a client user."
                },
                "message": {
                    "type": "string",
                    "description": "More details and corrective actions related to the error which can be shown to a client user."
                },
                "status": {
                    "type": "string",
                    "description": "HTTP Error code extension"
                },
                "referenceError": {
                    "type": "string",
                    "format": "uri",
                    "description": "URI of documentation describing the error."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class."
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name."
                }
            }
        }
    }
}
